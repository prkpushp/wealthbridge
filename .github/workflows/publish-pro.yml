name: Publish (Pro)

on:
  schedule:
    - cron: '30 * * * *'  # 9:00 AM IST
  workflow_dispatch:
    inputs:
      url:
        description: 'Optional CNBC article URL'
        required: false
        type: string
      title:
        description: 'Optional title override'
        required: false
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install requests beautifulsoup4

      - name: Select article URL (only if scheduled)
        if: github.event_name == 'schedule'
        run: python scripts/select_latest_finance_url.py

      - name: Set article URL
        id: seturl
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.url }}" ]; then
              echo "Using manually provided URL"
              echo "URL=${{ github.event.inputs.url }}" >> $GITHUB_ENV
            else
              echo "❌ No URL provided in manual run"
              exit 1
            fi
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            if [ -f selected_url.txt ]; then
              URL=$(cat selected_url.txt)
              if grep -Fxq "$URL" uploaded_url.txt; then
                echo "❌ URL has already been posted"
                exit 1
              fi
              echo "Using scraped finance URL"
              echo "URL=$URL" >> $GITHUB_ENV
            else
              echo "❌ selected_url.txt not found"
              exit 1
            fi
          else
            echo "❌ Unknown event type: ${{ github.event_name }}"
            exit 1
          fi

      - name: Debug print URL
        run: |
          echo "🔍 URL from env: $URL"
          if [ -z "$URL" ]; then
            echo "❌ URL is empty"
            exit 1
          fi

      - name: Fetch content and metadata
        run: python scripts/fetch_page-pro.py "$URL"

      - name: Load metadata
        run: |
          echo "TITLE=$(jq -r '.title // empty' meta.json)" >> $GITHUB_ENV
          echo "IMAGE_URL=$(jq -r '.image // empty' meta.json)" >> $GITHUB_ENV

      - name: Summarize using Gemini (Pro)
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          SOURCE_URL: ${{ env.URL }}
        run: python scripts/summarize_with_gemini-pro.py

      - name: Determine final title
        run: |
          if [ -n "${{ github.event.inputs.title }}" ]; then
            echo "TITLE=${{ github.event.inputs.title }}" >> $GITHUB_ENV
          fi

      - name: Publish to WordPress (Pro)
        env:
          WP_URL: ${{ secrets.WP_URL }}
          WP_USER: ${{ secrets.WP_USER }}
          WP_APPLICATION_PASSWORD: ${{ secrets.WP_APPLICATION_PASSWORD }}
          TITLE: ${{ env.TITLE }}
          IMAGE_URL: ${{ env.IMAGE_URL }}
        run: |
          AUTH=$(echo -n "$WP_USER:$WP_APPLICATION_PASSWORD" | base64)
          CONTENT=$(cat summary-pro.html)
          EXCERPT=$(cat excerpt-pro.txt)

          if [ -n "$IMAGE_URL" ]; then
            CONTENT="<img src='$IMAGE_URL' alt='Featured image' style='max-width:100%; border-radius:10px; margin-bottom:20px;' />\n\n$CONTENT"
          fi

          CONTENT_ESCAPED=$(jq -Rs . <<< "$CONTENT")
          EXCERPT_ESCAPED=$(jq -Rs . <<< "$EXCERPT")

          curl -X POST "$WP_URL/wp-json/wp/v2/posts" \
            -H "Authorization: Basic $AUTH" \
            -H "Content-Type: application/json" \
            -d "{ \"title\": \"$TITLE\", \"content\": $CONTENT_ESCAPED, \"excerpt\": $EXCERPT_ESCAPED, \"status\": \"publish\" }"

          echo "$URL" >> uploaded_url.txt
